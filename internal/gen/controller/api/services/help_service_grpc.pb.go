// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: controller/api/services/v1/help_service.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HelpService_Help_FullMethodName = "/controller.api.services.v1.HelpService/Help"
)

// HelpServiceClient is the client API for HelpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HelpServiceClient interface {
	// Help requests help from the configured help backend.
	Help(ctx context.Context, in *HelpRequest, opts ...grpc.CallOption) (*HelpResponse, error)
}

type helpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHelpServiceClient(cc grpc.ClientConnInterface) HelpServiceClient {
	return &helpServiceClient{cc}
}

func (c *helpServiceClient) Help(ctx context.Context, in *HelpRequest, opts ...grpc.CallOption) (*HelpResponse, error) {
	out := new(HelpResponse)
	err := c.cc.Invoke(ctx, HelpService_Help_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HelpServiceServer is the server API for HelpService service.
// All implementations must embed UnimplementedHelpServiceServer
// for forward compatibility
type HelpServiceServer interface {
	// Help requests help from the configured help backend.
	Help(context.Context, *HelpRequest) (*HelpResponse, error)
	mustEmbedUnimplementedHelpServiceServer()
}

// UnimplementedHelpServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHelpServiceServer struct {
}

func (UnimplementedHelpServiceServer) Help(context.Context, *HelpRequest) (*HelpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Help not implemented")
}
func (UnimplementedHelpServiceServer) mustEmbedUnimplementedHelpServiceServer() {}

// UnsafeHelpServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HelpServiceServer will
// result in compilation errors.
type UnsafeHelpServiceServer interface {
	mustEmbedUnimplementedHelpServiceServer()
}

func RegisterHelpServiceServer(s grpc.ServiceRegistrar, srv HelpServiceServer) {
	s.RegisterService(&HelpService_ServiceDesc, srv)
}

func _HelpService_Help_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelpServiceServer).Help(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelpService_Help_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelpServiceServer).Help(ctx, req.(*HelpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HelpService_ServiceDesc is the grpc.ServiceDesc for HelpService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HelpService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "controller.api.services.v1.HelpService",
	HandlerType: (*HelpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Help",
			Handler:    _HelpService_Help_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "controller/api/services/v1/help_service.proto",
}
